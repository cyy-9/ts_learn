安装ts：
    npm i -g typescript
    命令行运行tsc命令，检查是否安装成功

运行ts文件：在文件所在目录打开命令行，运行tsc [文件名].ts，就会完成对ts文件的编译，在同一目录下生成js文件

基本类型：
    类型声明：
        类型声明是ts最重要的一个特点
        通过类型声明可以指定ts中变量(参数、形参)的类型
        指定类型后，当给变量赋值时，ts编译器会自动检查值是否符合类型声明，不符合则报错
        类型声明给变量设置了类型，使变量只能存储某种类型的值
    自动类型判断：
        ts拥有自动的类型判断机制
        当对变量的声明和赋值是同时进行的，ts编译器会自动判断变量的类型，此时可以省略掉类型声明

ts文件中有语法错误时，还是可以编译成js文件，可以通过配置修改这个特点
ts文件在编译成js文件时，可以通过配置，选择编译成任意版本的js。比如es5, es6...

编译选项：
    自动监视ts文件的变化，并自动编译最新的ts文件为js：tsc xxx.ts -w，但这种方式只能一次监控一个ts文件，不推荐

    另一种方式运行 tsc -w 命令，可以监视此目录下所有的ts文件，使用这种方式必须要在目录下设置一个ts的配置文件 tsconfig.json
    运行 tsc 命令，可以编译目录下所有ts文件

    tsconfig.json文件的常用配置选项：
        include：
            定义希望被编译的ts文件所在的目录
            "include": ["src/**/*", "test/**/*"],
            上述例子中，所有src目录和test目录下的文件都会被编译
        exclude:
            定义需要排除在外的目录
            有一些默认值，例如node_modules等文件夹
            "exclude": ["./src/hello/**/*"]
            上述例子中，src下hello目录下的文件都不会编译
        compilerOptions:
            编译器选项
            内部属性：
                target：用来指定ts被编译后的js版本
                    target: "ES5",
                module：指定要使用的模块化规范
                lib：用来指定项目中要使用的库
                outDir：用来指定编译后的js文件所在的目录
                outFile：将所有编译后的代码合并为一个文件
                allowJs：是否对js文件进行编译，默认值false
                checkJs：是否使用ts语法规则检查js代码的语法，默认值true
                removeComments：编译后的文件是否移除注释
                noEmit：不生成编译后的文件，默认false
                noEmitOnError：当有错误时，不生成编译后的文件
                alwaysStrict：设置编译后的代码是否是严格模式，默认false
                noImplicitAny：不允许隐式的any类型
                noImplicitAny：不允许不明确类型的this
                strictNullCheck：严格的检查空值
                strict：所有严格检查的总开关，如果为true，则所有严格检查都为true
        注：
            /**表示任意目录，/*表示任意文件

